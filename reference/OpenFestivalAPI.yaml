swagger: "2.0"
info:
  description: "This is a marketplace of Elerance inc.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Elerance store"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "zaglushka@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "store.elerance.keenetic.pro"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
basePath: "/api"
tags:
- name: "app"
  description: "Application managment"
- name: "developers"
  description: "Developers of app"
- name: "downloads"
  description: "Download managment"
- name: "login"
  description: "Login into application"
- name: "logout"
  description: "Logout from application"
- name: "register"
  description: "Register new user"
- name: "reviews"
  description: "Review managment"
- name: "roles"
  description: "Role managment"
- name: "tags"
  description: "Tag managment"
- name: "users"
  description: "User managment"
schemes:
- "https"
- "http"
paths:
  /apps:
    put:
      tags:
      - "app"
      summary: "Add a new app to the store"
      description: ""
      operationId: "addApp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "App object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/App"
      responses:
        "405":
          description: "Invalid input"
      security:
        - Bearer: []

  /apps/{id}:
    get:
      tags:
      - "app"
      summary: "Find App by id"
      description: "Find App by id"
      operationId: "findAppById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of app to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
              result:
                type: "array"
                items:
                  $ref: "#/definitions/App"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
      security:
        - Bearer: []

    # post:
    #   tags:
    #   - "app"
    #   summary: "Update App by id"
    #   description: "Update App by id"
    #   operationId: "updateAppById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of app to update"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/App"
    #     "400":
    #       description: "Invalid status value"
    #     "404":
    #       description: "Not found"
    #   security:
    #     - Bearer: []

    # delete:
    #   tags:
    #   - "app"
    #   summary: "Delete App by id"
    #   description: "Remove app from the store"
    #   operationId: "deleteAppById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "Delete app by id"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid id"
    #     "404":
    #       description: "App not found"
    #   security:
    #     - Bearer: []
        
  /developers:
    put:
      tags:
      - "developers"
      summary: "Add a new developer to the store"
      description: ""
      operationId: "addDevelopers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Developer object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Developer"
      responses:
        "405":
          description: "Invalid input"
      security:
        - Bearer: []
        
  /developers/{id}:
    get:
      tags:
      - "developers"
      summary: "Find Developer by id"
      description: "Find Developer by id"
      operationId: "findDevelopersById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of developer to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
              result:
                type: "array"
                items:
                  $ref: "#/definitions/Developer"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
      security:
        - Bearer: []
        
    # post:
    #   tags:
    #   - "developers"
    #   summary: "Update Developer by id"
    #   description: "Update Developer by id"
    #   operationId: "findDeveloperById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of developer to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   - in: "body"
    #     name: "body"
    #     description: "Developer object that needs to be added to the store"
    #     required: true
    #     schema:
    #       $ref: "#/definitions/Developer"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/Developer"
    #     "400":
    #       description: "Invalid status value"
    #     "404":
    #       description: "Not found"
    #   security:
    #     - Bearer: []
        
    # delete:
    #   tags:
    #   - "developers"
    #   summary: "Delete Developer by id"
    #   description: "Multiple status values can be provided with comma separated strings"
    #   operationId: "deletedevelopersById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of developer for delete"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid id"
    #     "404":
    #       description: "App not found"
    #   security:
    #     - Bearer: []
       
  /downloads:
    put:
      tags:
      - "downloads"
      summary: "Add a new download to the table"
      description: ""
      operationId: "addDownload"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "App object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/App"
      responses:
        "405":
          description: "Invalid input"
      security:
        - Bearer: []
        
  /downloads/{id}:
    get:
      tags:
      - "downloads"
      summary: "Find Download by id"
      description: "Find Download by id"
      operationId: "findDownloadById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of app to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
              result:
                type: "array"
                items:
                  $ref: "#/definitions/Download"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
      security:
        - Bearer: []
        
    # post:
    #   tags:
    #   - "downloads"
    #   summary: "Update Download by id"
    #   description: "Update Download by id"
    #   operationId: "ChangeDownloadById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of app to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/Download"
    #     "400":
    #       description: "Invalid status value"
    #     "404":
    #       description: "Not found"
    #   security:
    #     - Bearer: []
        
    # delete:
    #   tags:
    #   - "downloads"
    #   summary: "Delete download  by id"
    #   description: "Multiple status values can be provided with comma separated strings"
    #   operationId: "deletedDownloadById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of download to download"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid id"
    #     "404":
    #       description: "App not found"
    #   security:
    #     - Bearer: []

  /login:
    post:
      tags:
      - "login"
      summary: "Login into application"
      description: "Login into application"
      consumes:
      - "application/x-www-form-urlencoded" 
      parameters:
      - name: "email"
        in: "formData"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
              result:
                type: object
                properties:
                  token:
                    $ref: "#/definitions/Token"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"

  /logout:
    post:
      tags:
      - "logout"
      summary: "Logout from application"
      description: "Logout from  application"
      consumes:
      - "application/x-www-form-urlencoded" 
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
  
  /register:
    post:
      tags:
      - "register"
      summary: "Register new user"
      description: "Register new user"
      consumes:
      - "application/x-www-form-urlencoded" 
      parameters:
      - name: "name"
        in: "formData"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
  

  /reviews:
    put:
      tags:
      - "reviews"
      summary: "Add a new reviews to the table"
      description: ""
      operationId: "addReviews"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "App object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        "405":
          description: "Invalid input"
      security:
        - Bearer: []
        
  /reviews/{id}:
    get:
      tags:
      - "reviews"
      summary: "Find Reviews by id"
      description: "Find Reviews by id"
      operationId: "findReviewsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of reviews to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
              result:
                type: "array"
                items:
                  $ref: "#/definitions/Review"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
      security:
        - Bearer: []
        
    # post:
    #   tags:
    #   - "reviews"
    #   summary: "Update Reviews by id"
    #   description: "Update Reviews by id"
    #   operationId: "ChangeReviewsById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of reviews to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/Review"
    #     "400":
    #       description: "Invalid status value"
    #     "404":
    #       description: "Not found"
    #   security:
    #     - Bearer: []
        
    # delete:
    #   tags:
    #   - "reviews"
    #   summary: "Delete reviews by id"
    #   description: "Multiple status values can be provided with comma separated strings"
    #   operationId: "deletedReviewsById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of reviews to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid id"
    #     "404":
    #       description: "Reviews not found"
    #   security:
    #     - Bearer: []

  /roles:
    put:
      tags:
      - "roles"
      summary: "Add a new role to the table"
      description: ""
      operationId: "addRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "App object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        "405":
          description: "Invalid input"
      security:
        - Bearer: []
        
  /roles/{id}:
    get:
      tags:
      - "roles"
      summary: "Find Roles by id"
      description: "Find Roles by id"
      operationId: "findRolesById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of roles to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
              result:
                type: "array"
                items:
                  $ref: "#/definitions/Role"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
      security:
        - Bearer: []
        
    # post:
    #   tags:
    #   - "roles"
    #   summary: "Update Roles by id"
    #   description: "Update Roles by id"
    #   operationId: "ChangeRolesById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of roles to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/Role"
    #     "400":
    #       description: "Invalid status value"
    #     "404":
    #       description: "Not found"
    #   security:
    #     - Bearer: []
        
    # delete:
    #   tags:
    #   - "roles"
    #   summary: "Delete roles by id"
    #   description: "Multiple status values can be provided with comma separated strings"
    #   operationId: "deletedRolesById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of roles to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid id"
    #     "404":
    #       description: "Reviews not found"
    #   security:
    #     - Bearer: []
   
  /tags:
    put:
      tags:
      - "tags"
      summary: "Add a new tags to the table"
      description: ""
      operationId: "addTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tag object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        "405":
          description: "Invalid input"
      security:
        - Bearer: []
        
  /tags/{id}:
    get:
      tags:
      - "tags"
      summary: "Find Tag by id"
      description: "Find Tag by id"
      operationId: "findTagById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tag to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
              result:
                type: "array"
                items:
                  $ref: "#/definitions/Tag"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
      security:
        - Bearer: []
        
    # post:
    #   tags:
    #   - "tags"
    #   summary: "Update Tag by id"
    #   description: "Update Tag by id"
    #   operationId: "ChangeTagById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of tag to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/Tag"
    #     "400":
    #       description: "Invalid status value"
    #     "404":
    #       description: "Not found"
    #   security:
    #     - Bearer: []
        
    # delete:
    #   tags:
    #   - "tags"
    #   summary: "Delete tag by id"
    #   description: "Multiple status values can be provided with comma separated strings"
    #   operationId: "deletedTagById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of roles to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid id"
    #     "404":
    #       description: "Reviews not found"
    #   security:
    #     - Bearer: []
  
  /users:
    put:
      tags:
      - "users"
      summary: "Add a new user to the table"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tag object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "405":
          description: "Invalid input"
      security:
        - Bearer: []
        
  /user/{id}:
    get:
      tags:
      - "users"
      summary: "Find user by id"
      description: "Find user by id"
      operationId: "findUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Success result"
              message:
                type: "string"
                description: "Response message"
              result:
                type: "array"
                items:
                  $ref: "#/definitions/User"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not found"
      security:
        - Bearer: []      
    # post:
    #   tags:
    #   - "users"
    #   summary: "Update user by id"
    #   description: "Update user by id"
    #   operationId: "ChangeUserById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of user to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/User"
    #     "400":
    #       description: "Invalid status value"
    #     "404":
    #       description: "Not found"
    #   security:
    #     - Bearer: []
        
    # delete:
    #   tags:
    #   - "users"
    #   summary: "Delete user by id"
    #   description: "Multiple status values can be provided with comma separated strings"
    #   operationId: "deletedUserById"
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "id"
    #     in: "path"
    #     description: "ID of user to return"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid id"
    #     "404":
    #       description: "Reviews not found"
    #   security:
    #     - Bearer: []  
definitions:
  App:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      developers_id:
        type: "integer"
        format: "int64"
      code:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      logo:
        type: "array"
        items:
          $ref: "#/definitions/Logo"
      backgroung:
        type: "array"
        items:
          $ref: "#/definitions/Logo"
      rights:
        type: "string"
      price:
        type: "number"
        format: "float"
      currency:
        type: "string"
      file_id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
      statusWorking:
        type: "string"
      developer:
        type: "array"
        items:
          $ref: "#/definitions/Developer"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      reviews:
        type: "array"
        items:
          $ref: "#/definitions/Review"
      downloads:
        type: "array"
        items:
          $ref: "#/definitions/Download"
      attachment:
        type: "array"
        items:
          $ref: "#/definitions/Attachment"
      published_at:
        type: "string"
        format: "date-time"
      withdrawn_at:
        type: "string"
        format: "date-time"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "App"
      
  
      
  Developer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      status:
        type: "string"
      statusWorking:
        type: "string"
      logo:
        type: "array"
        items:
          $ref: "#/definitions/Logo"
      background:
        type: "array"
        items:
          $ref: "#/definitions/Logo"
      verified:
        type: "integer"
        format: "int8"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "Developer"  
 
  Attachment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      original_name:
        type: "string"
      mime:
        type: "string"
      extension:
        type: "string"
      size:
        type: "integer"
        format: "int64"
      sort:
        type: "integer"
        format: "int32"
      path:
        type: "string"
      description:
        type: "string"
      alt:
        type: "string"
      hash:
        type: "string"
      disk:
        type: "string"
      user_id:
        type: "integer"
        format: "int32"
      group:
        type: "integer"
        format: "int32"
      url:
        type: "string"
      relativeUrl:
        type: "string"
      pivot:
        type: "array"
        items:
          $ref: "#/definitions/Pivot"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "Attachment"   

  Download:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      users_id:
        type: "integer"
        format: "int64"
      apps_id:
        type: "integer"
        format: "int64"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "Download"    
  
  Logo:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      original_name:
        type: "string"
      mime:
        type: "string"
      extension:
        type: "string"
      size:
        type: "integer"
        format: "int64"
      sort:
        type: "integer"
        format: "int32"
      path:
        type: "string"
      description:
        type: "string"
      alt:
        type: "string"
      hash:
        type: "string"
      disk:
        type: "string"
      user_id:
        type: "integer"
        format: "int32"
      group:
        type: "integer"
        format: "int32"
      url:
        type: "string"
      relativeUrl:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "Logo"
  
  Pivot:
    type: "object"
    properties:
      attachmentable_id:
        type: "integer"
        format: "int64"
      attachment_id:
        type: "integer"
        format: "int64"
      attachmentable_type:
        type: "integer"
        format: "int64"
    xml:
      name: "Pivot"
  
  Review:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      apps_id:
        type: "integer"
        format: "int64"
      text:
        type: "string"
      rate:
        type: "integer"
        format: "int32"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "Review"
  
  Role:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      slug:
        type: "string"
      name:
        type: "string"
      permissions:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "Role"
  
  Tag:  
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
      
  Token:  
    type: "object"
    properties:
      token:
        type: "string"
      type:
        type: "string"
      expires:
        type: "string"
        format: "date-time"
    xml:
      name: "Token"     
  
  User:  
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      login:
        type: "string"
      email_verified_at:
        type: "string"
        format: "date-time"
      password:
        type: "string"
      remember_token:
        type: "string"
      permissions:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "User"          
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
